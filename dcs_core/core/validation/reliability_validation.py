#  Copyright 2022-present, the Waterdip Labs Pvt. Ltd.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
from typing import Union

from dcs_core.core.datasource.search_datasource import SearchIndexDataSource
from dcs_core.core.datasource.sql_datasource import SQLDataSource
from dcs_core.core.validation.base import DeltaValidation, Validation


class CountDocumentsValidation(Validation):
    """
    DocumentCountMetrics is a class that represents a metric that is generated by a data source.
    """

    def _generate_metric_value(self):
        if isinstance(self.data_source, SearchIndexDataSource):
            return self.data_source.query_get_document_count(
                index_name=self.dataset_name,
                filters=self.where_filter if self.where_filter else None,
            )
        else:
            raise ValueError("Invalid data source type")


class CountRowValidation(Validation):

    """
    RowCountMetrics is a class that represents a metric that is generated by a data source.
    """

    def _generate_metric_value(self):
        if isinstance(self.data_source, SQLDataSource):
            return self.data_source.query_get_row_count(
                table=self.dataset_name,
                filters=self.where_filter if self.where_filter else None,
            )
        else:
            raise ValueError("Invalid data source type")


class DeltaCountRowValidation(DeltaValidation):
    """
    RowCountMetrics is a class that represents a metric that is generated by a data source.
    """

    def _generate_reference_metric_value(self, **kwargs) -> Union[float, int]:
        if isinstance(self.reference_data_source, SQLDataSource):
            return self.reference_data_source.query_get_row_count(
                table=self.reference_dataset_name,
                filters=self.where_filter if self.where_filter else None,
            )
        else:
            raise ValueError("Invalid data source type")

    def _generate_metric_value(self):
        if isinstance(self.data_source, SQLDataSource):
            return self.data_source.query_get_row_count(
                table=self.dataset_name,
                filters=self.where_filter if self.where_filter else None,
            )
        else:
            raise ValueError("Invalid data source type")


class FreshnessValueMetric(Validation):
    """
    FreshnessMetric is a class that represents a metric that is generated by a data source.
    """

    def _generate_metric_value(self):
        if isinstance(self.data_source, SQLDataSource):
            return self.data_source.query_get_time_diff(
                table=self.dataset_name, field=self.field_name
            )
        elif isinstance(self.data_source, SearchIndexDataSource):
            return self.data_source.query_get_time_diff(
                index_name=self.dataset_name, field=self.field_name
            )
        else:
            raise ValueError("Invalid data source type")
